'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = extractor;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _genericNames = require('generic-names');

var _genericNames2 = _interopRequireDefault(_genericNames);

var _path = require('path');

var _postcssModulesValues = require('postcss-modules-values');

var _postcssModulesValues2 = _interopRequireDefault(_postcssModulesValues);

var _postcssModulesLocalByDefault = require('postcss-modules-local-by-default');

var _postcssModulesLocalByDefault2 = _interopRequireDefault(_postcssModulesLocalByDefault);

var _postcssModulesExtractImports = require('postcss-modules-extract-imports');

var _postcssModulesExtractImports2 = _interopRequireDefault(_postcssModulesExtractImports);

var _postcssModulesScope = require('postcss-modules-scope');

var _postcssModulesScope2 = _interopRequireDefault(_postcssModulesScope);

var _postcssModulesParser = require('postcss-modules-parser');

var _postcssModulesParser2 = _interopRequireDefault(_postcssModulesParser);

/**
 * @param  {array}           options.append
 * @param  {array}           options.prepend
 * @param  {array}           options.use
 * @param  {function}        options.createImportedName
 * @param  {function|string} options.generateScopedName
 * @param  {string}          options.mode
 * @param  {string}          options.rootDir
 * @param  {function}        fetch
 * @return {object}
 */

function extractor(_x, fetch) {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$append = _ref.append;
  var append = _ref$append === undefined ? [] : _ref$append;
  var _ref$prepend = _ref.prepend;
  var prepend = _ref$prepend === undefined ? [] : _ref$prepend;
  var createImportedName = _ref.createImportedName;
  var generateScopedName = _ref.generateScopedName;
  var mode = _ref.mode;
  var use = _ref.use;
  var _ref$rootDir = _ref.rootDir;
  var context = _ref$rootDir === undefined ? process.cwd() : _ref$rootDir;

  var scopedName = undefined;
  if (generateScopedName) {
    scopedName = typeof generateScopedName !== 'function' ? (0, _genericNames2['default'])(generateScopedName || '[name]__[local]___[hash:base64:5]', { context: context }) : generateScopedName;
  } else {
    // small fallback
    scopedName = function (local, filename) {
      return _postcssModulesScope2['default'].generateScopedName(local, (0, _path.relative)(context, filename));
    };
  }

  var plugins = (use || [].concat(_toConsumableArray(prepend), [_postcssModulesValues2['default'], mode ? new _postcssModulesLocalByDefault2['default']({ mode: mode }) : _postcssModulesLocalByDefault2['default'], createImportedName ? new _postcssModulesExtractImports2['default']({ createImportedName: createImportedName }) : _postcssModulesExtractImports2['default'], new _postcssModulesScope2['default']({ generateScopedName: scopedName })], _toConsumableArray(append))).concat(new _postcssModulesParser2['default']({ fetch: fetch })); // no pushing in order to avoid the possible mutations

  return (0, _postcss2['default'])(plugins);
}

module.exports = exports['default'];