'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = setup;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _lodashAssign = require('lodash.assign');

var _lodashAssign2 = _interopRequireDefault(_lodashAssign);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _hook = require('./hook');

var _hook2 = _interopRequireDefault(_hook);

var _lodashIdentity = require('lodash.identity');

var _lodashIdentity2 = _interopRequireDefault(_lodashIdentity);

var _extractor = require('./extractor');

var _extractor2 = _interopRequireDefault(_extractor);

var _fs = require('fs');

var _path = require('path');

var _validate = require('./validate');

var _validate2 = _interopRequireDefault(_validate);

require('./guard');

// cache
var tokensByFile = {};
// global
var instance = (0, _extractor2['default'])({}, fetch);
var processorOptions = {};
var preProcess = _lodashIdentity2['default'];
var postProcess = undefined;

var debugFetch = (0, _debug2['default'])('css-modules:fetch');
var debugSetup = (0, _debug2['default'])('css-modules:setup');

/**
 * @param  {array}    options.extensions
 * @param  {function} options.preprocessCss
 * @param  {function} options.processCss
 * @param  {string}   options.to
 * @param  {object}   options.rest
 */

function setup() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var extraExtensions = _ref.extensions;
  var preprocessCss = _ref.preprocessCss;
  var processCss = _ref.processCss;
  var to = _ref.to;

  var rest = _objectWithoutProperties(_ref, ['extensions', 'preprocessCss', 'processCss', 'to']);

  debugSetup(arguments[0]);
  (0, _validate2['default'])(arguments[0]);
  instance = (0, _extractor2['default'])(rest, fetch);
  processorOptions = { to: to };
  preProcess = preprocessCss || _lodashIdentity2['default'];
  postProcess = processCss || null;
  // clearing cache
  tokensByFile = {};

  if (extraExtensions) {
    extraExtensions.forEach(function (extension) {
      return (0, _hook2['default'])(function (filename) {
        return fetch(filename, filename);
      }, extension);
    });
  }
}

/**
 * @param  {string} to   Absolute or relative path. Also can be path to the Node.JS module.
 * @param  {string} from Absolute path.
 * @return {object}
 */
function fetch(to, from) {
  // getting absolute path to the processing file
  var filename = /\w/i.test(to[0]) ? require.resolve(to) : (0, _path.resolve)((0, _path.dirname)(from), to);

  // checking cache
  var tokens = tokensByFile[filename];
  if (tokens) {
    debugFetch({ cache: true, filename: filename });
    return tokens;
  }

  debugFetch({ cache: false, filename: filename });
  var CSSSource = preProcess((0, _fs.readFileSync)(filename, 'utf8'), filename);
  // https://github.com/postcss/postcss/blob/master/docs/api.md#processorprocesscss-opts
  var lazyResult = instance.process(CSSSource, (0, _lodashAssign2['default'])(processorOptions, { from: filename }));

  // https://github.com/postcss/postcss/blob/master/docs/api.md#lazywarnings
  lazyResult.warnings().forEach(function (message) {
    return console.warn(message.text);
  });

  tokens = lazyResult.root.tokens;

  if (process.env.NODE_ENV !== 'development') {
    // updating cache
    tokensByFile[filename] = tokens;
  } else {
    // clearing cache in development mode
    delete require.cache[filename];
  }

  if (postProcess) {
    postProcess(lazyResult.css, filename);
  }

  return tokens;
}

(0, _hook2['default'])(function (filename) {
  return fetch(filename, filename);
}, '.css');
module.exports = exports['default'];